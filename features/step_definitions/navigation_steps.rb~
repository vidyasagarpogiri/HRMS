require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))

Given /^I am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^I go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^I press "([^\"]*)"$/ do |button|
  click_button(button)
end

When /^I click "([^\"]*)"$/ do |link|
  click_link(link)
end

When /^I fill in "([^\"]*)" with "([^\"]*)"$/ do |field, value|
  fill_in(field.gsub(' ', '_'), :with => value)
end

When /^I fill in "([^\"]*)" for "([^\"]*)"$/ do |value, field|
  fill_in(field.gsub(' ', '_'), :with => value)
end

When /^I fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^I select "([^\"]*)" from "([^\"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^I check "([^\"]*)"$/ do |field|
  check(field)
end

When /^I uncheck "([^\"]*)"$/ do |field|
  uncheck(field)
end

When /^I choose "([^\"]*)"$/ do |field|
  choose(field)
end

Then /^I should see "([^\"]*)"$/ do |text|
  page.should have_content(text)
end

Then /^I should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  page.should have_content(regexp)
end

Then /^I should not see "([^\"]*)"$/ do |text|
  page.should_not have_content(text)
end

Then /^I should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  page.should_not have_content(regexp)
end

Then /^the "([^\"]*)" field should contain "([^\"]*)"$/ do |field, value|
  find_field(field).value.should =~ /#{value}/
end

Then /^the "([^\"]*)" field should not contain "([^\"]*)"$/ do |field, value|
  find_field(field).value.should_not =~ /#{value}/
end

Then /^the "([^\"]*)" checkbox should be checked$/ do |label|
  find_field(label).should be_checked
end

Then /^the "([^\"]*)" checkbox should not be checked$/ do |label|
  find_field(label).should_not be_checked
end

Then /^I should be on (.+)$/ do |page_name|
  current_path.should == path_to(page_name)
end

Then /^page should have (.+) message "([^\"]*)"$/ do |type, text|
  page.has_css?("p.#{type}", :text => text, :visible => true)
end

When /^(?:|I )select date "([^ ]*) ([^ ]*) ([^ ]*) " as the "([^"]*)"$/ do |day, month, year, field|
  select(day,   :from => "#{field}_1i")
  select(month, :from => "#{field}_2i")
  select(year,  :from => "#{field}_3i")
end

When /^(?:|I )select "([^\"]*)" as the date$/ do |date|
date = Chronic.parse(date)
prefix = "date"

	select date.day.to_s, :from => "#{prefix}_#{dt_suffix[:day]}"
	select date.strftime(‘%B’), :from => "#{prefix}_#{dt_suffix[:month]}"
	select date.year.to_s, :from => "#{prefix}_#{dt_suffix[:year]}"
end



When /^(?:|I )select "([^\"]*)" as the "([^\"]*)" date and time$/ do |date, prefix|
date = Chronic.parse(date)

select date.year.to_s, :from => "#{prefix}_#{dt_suffix[:year]}"
select date.strftime(‘%B’), :from => "#{prefix}_#{dt_suffix[:month]}"
select date.day.to_s, :from => "#{prefix}_#{dt_suffix[:day]}"
select date.hour.to_s, :from => "#{prefix}_#{dt_suffix[:hour]}"
select date.min.to_s, :from => "#{prefix}_#{dt_suffix[:minute]}"
end

def dt_suffix
{
:year => ’1i’,
:month => ’2i’,
:day => ’3i’,
:hour => ’4i’,
:minute => ’5i’
}
end
